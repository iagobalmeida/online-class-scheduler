{"ast":null,"code":"import { ObjectID } from 'mongodb';\nimport connect from '../../../utils/database';\nexport default (async (req, res) => {\n  // GET  - Retorna usuário por email\n  if (req.method == 'GET') {\n    // Pega informações do body da requisição e valida\n    const {\n      email\n    } = req.query;\n\n    if (!email) {\n      res.status(400).json({\n        error: 'Missing ID/E-mail'\n      });\n      return;\n    }\n\n    const condition = id ? {\n      _id: new ObjectID(id)\n    } : email ? {\n      email: email\n    } : undefined; // Conecta-se ao banco de dados\n\n    const {\n      db\n    } = await connect();\n    const response = condition ? await db.collection('users').findOne(condition) : undefined;\n    res.status(response ? 200 : 400).json(response ? response : {\n      error: 'User not found'\n    });\n  } // ??? - Retorna erro\n  else {\n      res.status(400).json({\n        error: 'Wrong requisition method'\n      });\n    }\n});","map":{"version":3,"sources":["/home/iago/Documentos/ProjetosNextJS/online-class-scheduler/pages/api/user/[email].tsx"],"names":["ObjectID","connect","req","res","method","email","query","status","json","error","condition","id","_id","undefined","db","response","collection","findOne"],"mappings":"AAAA,SAASA,QAAT,QAAyB,SAAzB;AAEA,OAAOC,OAAP,MAAoB,yBAApB;AAoBA,gBAAe,OACXC,GADW,EAEXC,GAFW,KAGI;AACf;AACA,MAAKD,GAAG,CAACE,MAAJ,IAAc,KAAnB,EAA0B;AAEtB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYH,GAAG,CAACI,KAAtB;;AAEA,QAAG,CAACD,KAAJ,EAAU;AAAEF,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAE;AAAR,OAArB;AAAoD;AAAS;;AACzE,UAAMC,SAAS,GAAKC,EAAE,GAAG;AAAEC,MAAAA,GAAG,EAAE,IAAIZ,QAAJ,CAAaW,EAAb;AAAP,KAAH,GAAgCN,KAAK,GAAG;AAACA,MAAAA,KAAK,EAAEA;AAAR,KAAH,GAAoBQ,SAA/E,CANsB,CAQtB;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,OAAO,EAA9B;AACA,UAAMc,QAAQ,GAAGL,SAAS,GAAG,MAAMI,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+BP,SAA/B,CAAT,GAAqDG,SAA/E;AACAV,IAAAA,GAAG,CAACI,MAAJ,CAAWQ,QAAQ,GAAG,GAAH,GAAS,GAA5B,EAAiCP,IAAjC,CAAsCO,QAAQ,GAAGA,QAAH,GAAc;AAACN,MAAAA,KAAK,EAAE;AAAR,KAA5D;AACH,GAZD,CAaA;AAbA,OAcI;AACAN,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB;AACH;AAEJ,CAvBD","sourcesContent":["import { ObjectID } from 'mongodb';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport connect from '../../../utils/database'\n\ninterface ErrorResponseType {\n    error: string\n}\n\ninterface SucessResponseType {\n    _id:                    string,\n    password:               string,\n    name:                   string,\n    cellphone:              string,\n    isTeacher:              boolean\n    courses:                string[],\n    available_hours:        object,\n    available_locations:    object[],\n    appointments:           object[],\n    coins:                  number,\n    reviews:                number[]\n}\n\nexport default async(\n    req: NextApiRequest, \n    res: NextApiResponse<ErrorResponseType | SucessResponseType>\n):Promise<void> => {\n    // GET  - Retorna usuário por email\n    if ( req.method == 'GET' ){\n\n        // Pega informações do body da requisição e valida\n        const { email } = req.query;\n\n        if(!email){ res.status(400).json({error: 'Missing ID/E-mail'}); return; }\n        const condition = ( id ? { _id: new ObjectID(id) } : (email ? {email: email} : undefined))\n\n        // Conecta-se ao banco de dados\n        const { db }   = await connect();\n        const response = condition ? await db.collection('users').findOne(condition) : undefined;\n        res.status(response ? 200 : 400).json(response ? response : {error: 'User not found'});        \n    }\n    // ??? - Retorna erro\n    else{\n        res.status(400).json({ error: 'Wrong requisition method' });\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}