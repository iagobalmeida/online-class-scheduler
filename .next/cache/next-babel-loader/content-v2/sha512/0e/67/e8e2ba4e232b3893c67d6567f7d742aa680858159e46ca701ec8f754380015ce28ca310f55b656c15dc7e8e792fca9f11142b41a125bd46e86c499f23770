{"ast":null,"code":"import connect from '../../utils/database';\nexport default (async (req, res) => {\n  // POST  - Adiciona usuário\n  if (req.method == 'POST') {\n    // Pega informações do body da requisição e valida\n    const {\n      date,\n      teacher_id,\n      teacher_name,\n      student_id,\n      student_name,\n      course,\n      location,\n      apointment_link\n    } = req.body;\n\n    if (!date || !teacher_id || !teacher_name || !student_id || !student_name || !course || !location || !apointment_link) {\n      res.status(400).json({\n        error: 'Missing body parameter'\n      });\n      return;\n    } // Conecta-se ao banco de dados\n\n\n    const {\n      db\n    } = await connect();\n    const response = await db.collection('users').insertOne({\n      date,\n      teacher_id,\n      teacher_name,\n      student_id,\n      student_name,\n      course,\n      location,\n      apointment_link\n    });\n    res.status(200).json(response.ops[0]);\n  } // ??? - Retorna erro\n  else {\n      res.status(400).json({\n        error: 'Wrong requisition method'\n      });\n    }\n});","map":{"version":3,"sources":["/home/iago/Documentos/ProjetosNextJS/online-class-scheduler/pages/api/apointment.tsx"],"names":["connect","req","res","method","date","teacher_id","teacher_name","student_id","student_name","course","location","apointment_link","body","status","json","error","db","response","collection","insertOne","ops"],"mappings":"AAEA,OAAOA,OAAP,MAAoB,sBAApB;AAmBA,gBAAe,OACXC,GADW,EAEXC,GAFW,KAGI;AACf;AACA,MAAKD,GAAG,CAACE,MAAJ,IAAc,MAAnB,EAA0B;AACtB;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA,YAApB;AAAkCC,MAAAA,UAAlC;AAA8CC,MAAAA,YAA9C;AAA4DC,MAAAA,MAA5D;AAAoEC,MAAAA,QAApE;AAA8EC,MAAAA;AAA9E,QAAkGV,GAAG,CAACW,IAA5G;;AACA,QAAG,CAACR,IAAD,IAAS,CAACC,UAAV,IAAwB,CAACC,YAAzB,IAAyC,CAACC,UAA1C,IAAwD,CAACC,YAAzD,IAAyE,CAACC,MAA1E,IAAoF,CAACC,QAArF,IAAiG,CAACC,eAArG,EAAsH;AAAET,MAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAC;AAAR,OAArB;AAAyD;AAAS,KAHpK,CAItB;;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMhB,OAAO,EAA9B;AACA,UAAMiB,QAAQ,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,SAAvB,CAAiC;AACpDf,MAAAA,IADoD;AAEpDC,MAAAA,UAFoD;AAGpDC,MAAAA,YAHoD;AAGtCC,MAAAA,UAHsC;AAG1BC,MAAAA,YAH0B;AAGZC,MAAAA,MAHY;AAGJC,MAAAA,QAHI;AAGMC,MAAAA;AAHN,KAAjC,CAAvB;AAKAT,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,QAAQ,CAACG,GAAT,CAAa,CAAb,CAArB;AACH,GAZD,CAaA;AAbA,OAcI;AACAlB,MAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB;AACH;AAEJ,CAvBD","sourcesContent":["import { ObjectID } from 'mongodb';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport connect from '../../utils/database'\n\ninterface ErrorResponseType {\n    error: string\n}\n\ninterface SucessResponseType {\n    _id:                    string,\n    name:                   string,\n    cellphone:              string,\n    isTeacher:              boolean\n    courses:                string[],\n    available_hours:        object,\n    available_locations:    object[],\n    apointments:            object[],\n    coins:                  number,\n    reviews:                number[]\n}\n\nexport default async(\n    req: NextApiRequest, \n    res: NextApiResponse<ErrorResponseType | SucessResponseType>\n):Promise<void> => {\n    // POST  - Adiciona usuário\n    if ( req.method == 'POST'){\n        // Pega informações do body da requisição e valida\n        const { date, teacher_id, teacher_name, student_id, student_name, course, location, apointment_link } = req.body;\n        if(!date || !teacher_id || !teacher_name || !student_id || !student_name || !course || !location || !apointment_link) { res.status(400).json({ error:'Missing body parameter'}); return; }\n        // Conecta-se ao banco de dados\n        const { db }   = await connect();\n        const response = await db.collection('users').insertOne({\n            date,\n            teacher_id,\n            teacher_name, student_id, student_name, course, location, apointment_link\n        });\n        res.status(200).json(response.ops[0]);\n    }\n    // ??? - Retorna erro\n    else{\n        res.status(400).json({ error: 'Wrong requisition method' });\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}