{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport connect from '../../../utils/database';\nexport default NextAuth({\n  session: {\n    jwt: true,\n    maxAge: 30 * 24 * 60 * 60\n  },\n  // Configure one or more authentication providers\n  providers: [Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: '',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      email: {\n        label: \"E-mail\",\n        type: \"email\",\n        placeholder: \"exemplo@dominio.com\"\n      },\n      password: {\n        label: \"Senha\",\n        type: \"password\"\n      }\n    },\n\n    async authorize(credentials) {\n      const {\n        email,\n        password\n      } = Object.create(credentials);\n\n      if (!email || !password) {\n        return null;\n      }\n\n      const {\n        db\n      } = await connect();\n      const user = await db.collection('users').findOne({\n        email: email,\n        password: password\n      });\n      return user ? user : null;\n    }\n\n  })],\n  // A database is optional, but required to persist accounts in a database\n  database: process.env.DATABASE_URL\n});","map":{"version":3,"sources":["/home/iago/Documentos/ProjetosNextJS/online-class-scheduler/pages/api/auth/[...nextauth].ts"],"names":["NextAuth","Providers","connect","session","jwt","maxAge","providers","Credentials","name","credentials","email","label","type","placeholder","password","authorize","Object","create","db","user","collection","findOne","database","process","env","DATABASE_URL"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAOA,eAAeF,QAAQ,CAAC;AACpBG,EAAAA,OAAO,EAAE;AACLC,IAAAA,GAAG,EAAE,IADA;AAELC,IAAAA,MAAM,EAAE,KAAK,EAAL,GAAU,EAAV,GAAe;AAFlB,GADW;AAKpB;AACAC,EAAAA,SAAS,EAAE,CACPL,SAAS,CAACM,WAAV,CAAsB;AAClB;AACAC,IAAAA,IAAI,EAAE,EAFY;AAGlB;AACA;AACA;AACAC,IAAAA,WAAW,EAAE;AACTC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE,QAAT;AAAmBC,QAAAA,IAAI,EAAE,OAAzB;AAAkCC,QAAAA,WAAW,EAAE;AAA/C,OADE;AAETC,MAAAA,QAAQ,EAAE;AAAGH,QAAAA,KAAK,EAAE,OAAV;AAAmBC,QAAAA,IAAI,EAAE;AAAzB;AAFD,KANK;;AAUlB,UAAMG,SAAN,CAAgBN,WAAhB,EAA6B;AAEzB,YAAM;AAAEC,QAAAA,KAAF;AAASI,QAAAA;AAAT,UAAsBE,MAAM,CAACC,MAAP,CAAcR,WAAd,CAA5B;;AAEA,UAAK,CAACC,KAAD,IAAU,CAACI,QAAhB,EAA2B;AAAE,eAAO,IAAP;AAAc;;AAE3C,YAAM;AAAEI,QAAAA;AAAF,UAAW,MAAMhB,OAAO,EAA9B;AACA,YAAMiB,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B;AAACX,QAAAA,KAAK,EAAEA,KAAR;AAAeI,QAAAA,QAAQ,EAAEA;AAAzB,OAA/B,CAAnB;AAEA,aAAOK,IAAI,GAAGA,IAAH,GAAU,IAArB;AACH;;AApBiB,GAAtB,CADO,CANS;AA8BpB;AACAG,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC;AA/BF,CAAD,CAAvB","sourcesContent":["import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\nimport connect from '../../../utils/database'\n\ninterface UserCredentials {\n    email: string,\n    password: string\n}\n\nexport default NextAuth({\n    session: {\n        jwt: true,\n        maxAge: 30 * 24 * 60 * 60\n    },\n    // Configure one or more authentication providers\n    providers: [\n        Providers.Credentials({\n            // The name to display on the sign in form (e.g. 'Sign in with...')\n            name: '',\n            // The credentials is used to generate a suitable form on the sign in page.\n            // You can specify whatever fields you are expecting to be submitted.\n            // e.g. domain, username, password, 2FA token, etc.\n            credentials: {\n                email: { label: \"E-mail\", type: \"email\", placeholder: \"exemplo@dominio.com\" },\n                password: {  label: \"Senha\", type: \"password\" }\n            },\n            async authorize(credentials) {\n\n                const { email, password } = Object.create(credentials) as UserCredentials;\n\n                if ( !email || !password ) { return null; }\n\n                const { db }   = await connect();\n                const user = await db.collection('users').findOne({email: email, password: password})\n\n                return user ? user : null;\n            }\n        })\n    ],\n    // A database is optional, but required to persist accounts in a database\n    database: process.env.DATABASE_URL,\n})"]},"metadata":{},"sourceType":"module"}