{"ast":null,"code":"import { ObjectID } from 'mongodb';\nimport connect from '../../utils/database';\nexport default (async (req, res) => {\n  // POST  - Adiciona usuário\n  if (req.method == 'POST') {\n    // Pega informações do body da requisição e valida\n    const {\n      name,\n      username,\n      password,\n      email,\n      cellphone,\n      isTeacher,\n      courses,\n      available_hours,\n      available_locations,\n      appointments,\n      coins,\n      reviews\n    } = req.body;\n\n    if (!name || !username || !password || !email || !cellphone || isTeacher == undefined) {\n      res.status(400).json({\n        error: 'Missing body parameter'\n      });\n      return;\n    } // Conecta-se ao banco de dados\n\n\n    const {\n      db\n    } = await connect();\n    const response = await db.collection('users').insertOne({\n      name: name,\n      username: username,\n      password: password,\n      email: email,\n      cellphone: cellphone,\n      isTeacher: isTeacher,\n      courses: courses ? courses : [],\n      available_hours: available_hours ? available_hours : {},\n      available_locations: available_locations ? available_locations : [],\n      appointments: appointments ? appointments : [],\n      coins: coins ? coins : 0,\n      reviews: reviews ? reviews : []\n    });\n    res.status(200).json(response.ops[0]);\n  } // GET  - Retorna usuário por email\n  else if (req.method == 'GET') {\n      // Pega informações do body da requisição e valida\n      const {\n        email,\n        id\n      } = req.body;\n\n      if (!email && !id) {\n        res.status(400).json({\n          error: 'Missing ID/E-mail'\n        });\n        return;\n      }\n\n      const condition = id ? {\n        _id: new ObjectID(id)\n      } : email ? {\n        email: email\n      } : undefined; // Conecta-se ao banco de dados\n\n      const {\n        db\n      } = await connect();\n      const response = condition ? await db.collection('users').findOne(condition) : undefined;\n      res.status(response ? 200 : 400).json(response ? response : {\n        error: 'User not found'\n      });\n    } // ??? - Retorna erro\n    else {\n        res.status(400).json({\n          error: 'Wrong requisition method'\n        });\n      }\n});","map":{"version":3,"sources":["/home/iago/Documentos/ProjetosNextJS/online-class-scheduler/pages/api/user.tsx"],"names":["ObjectID","connect","req","res","method","name","username","password","email","cellphone","isTeacher","courses","available_hours","available_locations","appointments","coins","reviews","body","undefined","status","json","error","db","response","collection","insertOne","ops","id","condition","_id","findOne"],"mappings":"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","sourcesContent":["import { ObjectID } from 'mongodb';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport connect from '../../utils/database'\n\ninterface ErrorResponseType {\n    error: string\n}\n\ninterface SucessResponseType {\n    _id:                    string,\n    username:               string,\n    password:               string,\n    name:                   string,\n    cellphone:              string,\n    isTeacher:              boolean\n    courses:                string[],\n    available_hours:        object,\n    available_locations:    object[],\n    appointments:           object[],\n    coins:                  number,\n    reviews:                number[]\n}\n\nexport default async(\n    req: NextApiRequest, \n    res: NextApiResponse<ErrorResponseType | SucessResponseType>\n):Promise<void> => {\n    // POST  - Adiciona usuário\n    if ( req.method == 'POST'){\n        // Pega informações do body da requisição e valida\n        const { name, username, password, email, cellphone, isTeacher, courses, available_hours, available_locations, appointments, coins, reviews } = req.body;\n        if(!name || !username || !password || !email || !cellphone || (isTeacher == undefined)) { res.status(400).json({ error:'Missing body parameter'}); return; }\n        \n        // Conecta-se ao banco de dados\n        const { db }   = await connect();\n        const response = await db.collection('users').insertOne({\n            name:                   name,\n            username:               username,\n            password:               password,\n            email:                  email,\n            cellphone:              cellphone,\n            isTeacher:              isTeacher,\n            courses:                courses             ? courses :             [],\n            available_hours:        available_hours     ? available_hours :     {},\n            available_locations:    available_locations ? available_locations : [],\n            appointments:            appointments       ? appointments :        [],\n            coins:                  coins               ? coins :               0,\n            reviews:                reviews             ? reviews :             []\n        });\n        res.status(200).json(response.ops[0]);\n    }\n    // GET  - Retorna usuário por email\n    else if ( req.method == 'GET' ){\n\n        // Pega informações do body da requisição e valida\n        const { email, id } = req.body;\n        if(!email && !id){ res.status(400).json({error: 'Missing ID/E-mail'}); return; }\n        const condition = ( id ? { _id: new ObjectID(id) } : (email ? {email: email} : undefined))\n\n        // Conecta-se ao banco de dados\n        const { db }   = await connect();\n        const response = condition ? await db.collection('users').findOne(condition) : undefined;\n        res.status(response ? 200 : 400).json(response ? response : {error: 'User not found'});        \n    }\n    // ??? - Retorna erro\n    else{\n        res.status(400).json({ error: 'Wrong requisition method' });\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}