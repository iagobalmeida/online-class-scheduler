{"ast":null,"code":"import connect from '../../utils/database';\nexport default (async (req, res) => {\n  // POST  - Adiciona usuário\n  if (req.method == 'POST') {\n    // Pega informações do body da requisição e valida\n    const {\n      date,\n      teacher_id,\n      teacher_name,\n      students_id,\n      students_names\n    } = req.body;\n\n    if (!name || !email || !cellphone || isTeacher == undefined) {\n      res.status(400).json({\n        error: 'Missing body parameter'\n      });\n      return;\n    } // Conecta-se ao banco de dados\n\n\n    const {\n      db\n    } = await connect();\n    const response = await db.collection('users').insertOne({\n      name: name,\n      email: email,\n      cellphone: cellphone,\n      isTeacher: isTeacher,\n      courses: courses ? courses : [],\n      available_hours: available_hours ? available_hours : {},\n      available_locations: available_locations ? available_locations : [],\n      apointments: apointments ? apointments : [],\n      coins: coins ? coins : 0,\n      reviews: reviews ? reviews : []\n    });\n    res.status(200).json(response.ops[0]);\n  } // ??? - Retorna erro\n  else {\n      res.status(400).json({\n        error: 'Wrong requisition method'\n      });\n    }\n});","map":{"version":3,"sources":["/home/iago/Documentos/ProjetosNextJS/online-class-scheduler/pages/api/apointment.tsx"],"names":["connect","req","res","method","date","teacher_id","teacher_name","students_id","students_names","body","name","email","cellphone","isTeacher","undefined","status","json","error","db","response","collection","insertOne","courses","available_hours","available_locations","apointments","coins","reviews","ops"],"mappings":"AAEA,OAAOA,OAAP,MAAoB,sBAApB;AAmBA,gBAAe,OACXC,GADW,EAEXC,GAFW,KAGI;AACf;AACA,MAAKD,GAAG,CAACE,MAAJ,IAAc,MAAnB,EAA0B;AACtB;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA,YAApB;AAAkCC,MAAAA,WAAlC;AAA+CC,MAAAA;AAA/C,QAAoEP,GAAG,CAACQ,IAA9E;;AACA,QAAG,CAACC,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACC,SAApB,IAAkCC,SAAS,IAAIC,SAAlD,EAA8D;AAAEZ,MAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAC;AAAR,OAArB;AAAyD;AAAS,KAH5G,CAItB;;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMlB,OAAO,EAA9B;AACA,UAAMmB,QAAQ,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,SAAvB,CAAiC;AACpDX,MAAAA,IAAI,EAAoBA,IAD4B;AAEpDC,MAAAA,KAAK,EAAmBA,KAF4B;AAGpDC,MAAAA,SAAS,EAAeA,SAH4B;AAIpDC,MAAAA,SAAS,EAAeA,SAJ4B;AAKpDS,MAAAA,OAAO,EAAiBA,OAAO,GAAeA,OAAf,GAAqC,EALhB;AAMpDC,MAAAA,eAAe,EAASA,eAAe,GAAOA,eAAP,GAA6B,EANhB;AAOpDC,MAAAA,mBAAmB,EAAKA,mBAAmB,GAAGA,mBAAH,GAAyB,EAPhB;AAQpDC,MAAAA,WAAW,EAAaA,WAAW,GAAWA,WAAX,GAAiC,EARhB;AASpDC,MAAAA,KAAK,EAAmBA,KAAK,GAAiBA,KAAjB,GAAuC,CAThB;AAUpDC,MAAAA,OAAO,EAAiBA,OAAO,GAAeA,OAAf,GAAqC;AAVhB,KAAjC,CAAvB;AAYAzB,IAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,QAAQ,CAACS,GAAT,CAAa,CAAb,CAArB;AACH,GAnBD,CAoBA;AApBA,OAqBI;AACA1B,MAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB;AACH;AAEJ,CA9BD","sourcesContent":["import { ObjectID } from 'mongodb';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport connect from '../../utils/database'\n\ninterface ErrorResponseType {\n    error: string\n}\n\ninterface SucessResponseType {\n    _id:                    string,\n    name:                   string,\n    cellphone:              string,\n    isTeacher:              boolean\n    courses:                string[],\n    available_hours:        object,\n    available_locations:    object[],\n    apointments:            object[],\n    coins:                  number,\n    reviews:                number[]\n}\n\nexport default async(\n    req: NextApiRequest, \n    res: NextApiResponse<ErrorResponseType | SucessResponseType>\n):Promise<void> => {\n    // POST  - Adiciona usuário\n    if ( req.method == 'POST'){\n        // Pega informações do body da requisição e valida\n        const { date, teacher_id, teacher_name, students_id, students_names,  } = req.body;\n        if(!name || !email || !cellphone || (isTeacher == undefined)) { res.status(400).json({ error:'Missing body parameter'}); return; }\n        // Conecta-se ao banco de dados\n        const { db }   = await connect();\n        const response = await db.collection('users').insertOne({\n            name:                   name,\n            email:                  email,\n            cellphone:              cellphone,\n            isTeacher:              isTeacher,\n            courses:                courses             ? courses :             [],\n            available_hours:        available_hours     ? available_hours :     {},\n            available_locations:    available_locations ? available_locations : [],\n            apointments:            apointments         ? apointments :         [],\n            coins:                  coins               ? coins :               0,\n            reviews:                reviews             ? reviews :             []\n        });\n        res.status(200).json(response.ops[0]);\n    }\n    // ??? - Retorna erro\n    else{\n        res.status(400).json({ error: 'Wrong requisition method' });\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}