{"ast":null,"code":"import connect from '../../utils/database';\nexport default (async (req, res) => {\n  // POST  - Adiciona usuário\n  if (req.method == 'POST') {\n    // Pega informações do body da requisição e valida\n    const {\n      name,\n      email,\n      cellphone,\n      isTeacher\n    } = req.body;\n\n    if (!name || !email || !cellphone || isTeacher == undefined) {\n      res.status(400).json({\n        error: 'Missing body parameter'\n      });\n      return;\n    } // Conecta-se ao banco de dados\n\n\n    const {\n      db\n    } = await connect();\n    const response = await db.collection('users').insertOne({\n      name: name,\n      email: email,\n      cellphone: cellphone,\n      isTeacher: isTeacher,\n      courses: [],\n      available_hours: {},\n      available_locations: [],\n      apointments: [],\n      coins: 0,\n      reviews: []\n    });\n    res.status(200).json(response.ops[0]);\n  } // GET  - Retorna usuário por email\n  else if (req.method == 'GET') {\n      // Pega informações do body da requisição e valida\n      const {\n        email\n      } = req.body;\n\n      if (!email) {\n        res.status(400).json({\n          error: 'Missing email parameter '\n        });\n        return;\n      } // Conecta-se ao banco de dados\n\n\n      const {\n        db\n      } = await connect();\n      const response = await db.collection('users').findOne({\n        email: email\n      });\n      res.status(200).json(response);\n    } // ??? - Retorna erro\n    else {\n        res.status(400).json({\n          error: 'Wrong requisition method'\n        });\n      }\n});","map":{"version":3,"sources":["/home/iago/Documentos/ProjetosNextJS/online-class-scheduler/pages/api/user.tsx"],"names":["connect","req","res","method","name","email","cellphone","isTeacher","body","undefined","status","json","error","db","response","collection","insertOne","courses","available_hours","available_locations","apointments","coins","reviews","ops","findOne"],"mappings":"AAGA,OAAOA,OAAP,MAAoB,sBAApB;AAcA,gBAAe,OACXC,GADW,EAEXC,GAFW,KAGI;AACf;AACA,MAAKD,GAAG,CAACE,MAAJ,IAAc,MAAnB,EAA0B;AACtB;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,SAAf;AAA0BC,MAAAA;AAA1B,QAAwCN,GAAG,CAACO,IAAlD;;AACA,QAAG,CAACJ,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACC,SAApB,IAAkCC,SAAS,IAAIE,SAAlD,EAA8D;AAAEP,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAC;AAAR,OAArB;AAAyD;AAAS,KAH5G,CAItB;;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,OAAO,EAA9B;AACA,UAAMc,QAAQ,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,SAAvB,CAAiC;AACpDZ,MAAAA,IAAI,EAAoBA,IAD4B;AAEpDC,MAAAA,KAAK,EAAmBA,KAF4B;AAGpDC,MAAAA,SAAS,EAAeA,SAH4B;AAIpDC,MAAAA,SAAS,EAAeA,SAJ4B;AAKpDU,MAAAA,OAAO,EAAiB,EAL4B;AAMpDC,MAAAA,eAAe,EAAS,EAN4B;AAOpDC,MAAAA,mBAAmB,EAAK,EAP4B;AAQpDC,MAAAA,WAAW,EAAa,EAR4B;AASpDC,MAAAA,KAAK,EAAmB,CAT4B;AAUpDC,MAAAA,OAAO,EAAiB;AAV4B,KAAjC,CAAvB;AAYApB,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,QAAQ,CAACS,GAAT,CAAa,CAAb,CAArB;AACH,GAnBD,CAoBA;AApBA,OAqBK,IAAKtB,GAAG,CAACE,MAAJ,IAAc,KAAnB,EAA0B;AAC3B;AACA,YAAM;AAAEE,QAAAA;AAAF,UAAYJ,GAAG,CAACO,IAAtB;;AACA,UAAG,CAACH,KAAJ,EAAU;AAAEH,QAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,KAAK,EAAE;AAAR,SAArB;AAA2D;AAAS,OAHrD,CAI3B;;;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMb,OAAO,EAA9B;AACA,YAAMc,QAAQ,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBS,OAAvB,CAA+B;AAAEnB,QAAAA,KAAK,EAAEA;AAAT,OAA/B,CAAvB;AAEAH,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,QAArB;AACH,KATI,CAUL;AAVK,SAWD;AACAZ,QAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAArB;AACH;AAEJ,CAzCD","sourcesContent":["import { Db } from 'mongodb';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { isUndefined } from 'node:util';\nimport connect from '../../utils/database'\n\ninterface ErrorResponseType {\n    error: string\n}\n\ninterface SucessResponseType {\n    _id:        string,\n    name:       string,\n    cellphone:  string,\n    isTeacher:  boolean\n\n}\n\nexport default async(\n    req: NextApiRequest, \n    res: NextApiResponse<ErrorResponseType | SucessResponseType>\n):Promise<void> => {\n    // POST  - Adiciona usuário\n    if ( req.method == 'POST'){\n        // Pega informações do body da requisição e valida\n        const { name, email, cellphone, isTeacher } = req.body;\n        if(!name || !email || !cellphone || (isTeacher == undefined)) { res.status(400).json({ error:'Missing body parameter'}); return; }\n        // Conecta-se ao banco de dados\n        const { db }   = await connect();\n        const response = await db.collection('users').insertOne({\n            name:                   name,\n            email:                  email,\n            cellphone:              cellphone,\n            isTeacher:              isTeacher,\n            courses:                [],\n            available_hours:        {},\n            available_locations:    [],\n            apointments:            [],\n            coins:                  0,\n            reviews:                []\n        });\n        res.status(200).json(response.ops[0]);\n    }\n    // GET  - Retorna usuário por email\n    else if ( req.method == 'GET' ){\n        // Pega informações do body da requisição e valida\n        const { email } = req.body;\n        if(!email){ res.status(400).json({error: 'Missing email parameter '}); return; }\n        // Conecta-se ao banco de dados\n        const { db }   = await connect();\n        const response = await db.collection('users').findOne({ email: email });\n        \n        res.status(200).json(response);        \n    }\n    // ??? - Retorna erro\n    else{\n        res.status(400).json({ error: 'Wrong requisition method' });\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}