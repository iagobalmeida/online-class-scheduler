{"ast":null,"code":"import { ObjectID } from 'mongodb';\nimport connect from '../../utils/database';\nexport default (async (req, res) => {\n  // POST  - Adiciona usuário\n  if (req.method == 'POST') {\n    // Pega informações do body da requisição e valida\n    const {\n      name,\n      email,\n      cellphone,\n      isTeacher,\n      courses,\n      available_hours,\n      available_locations,\n      apointments,\n      coins,\n      reviews\n    } = req.body;\n\n    if (!name || !email || !cellphone || isTeacher == undefined) {\n      res.status(400).json({\n        error: 'Missing body parameter'\n      });\n      return;\n    } // Conecta-se ao banco de dados\n\n\n    const {\n      db\n    } = await connect();\n    const response = await db.collection('users').insertOne({\n      name: name,\n      email: email,\n      cellphone: cellphone,\n      isTeacher: isTeacher,\n      courses: courses ? courses : [],\n      available_hours: available_hours ? available_hours : {},\n      available_locations: available_locations ? available_locations : [],\n      apointments: apointments ? apointments : [],\n      coins: coins ? coins : 0,\n      reviews: reviews ? reviews : []\n    });\n    res.status(200).json(response.ops[0]);\n  } // GET  - Retorna usuário por email\n  else if (req.method == 'GET') {\n      // Pega informações do body da requisição e valida\n      const {\n        email,\n        id\n      } = req.body;\n\n      if (!email && !id) {\n        res.status(400).json({\n          error: 'Missing ID/E-mail'\n        });\n        return;\n      }\n\n      const condition = id ? {\n        _id: new ObjectID(id)\n      } : email ? {\n        email: email\n      } : undefined; // Conecta-se ao banco de dados\n\n      const {\n        db\n      } = await connect();\n      const response = condition ? await db.collection('users').findOne(condition) : undefined;\n      res.status(response ? 200 : 400).json(response ? response : {\n        error: 'User not found'\n      });\n    } // ??? - Retorna erro\n    else {\n        res.status(400).json({\n          error: 'Wrong requisition method'\n        });\n      }\n});","map":{"version":3,"sources":["/home/iago/Documentos/ProjetosNextJS/online-class-scheduler/pages/api/user.tsx"],"names":["ObjectID","connect","req","res","method","name","email","cellphone","isTeacher","courses","available_hours","available_locations","apointments","coins","reviews","body","undefined","status","json","error","db","response","collection","insertOne","ops","id","condition","_id","findOne"],"mappings":"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","sourcesContent":["import { ObjectID } from 'mongodb';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport connect from '../../utils/database'\n\ninterface ErrorResponseType {\n    error: string\n}\n\ninterface SucessResponseType {\n    _id:                    string,\n    name:                   string,\n    cellphone:              string,\n    isTeacher:              boolean\n    courses:                string[],\n    available_hours:        object,\n    available_locations:    object[],\n    apointments:            object[],\n    coins:                  number,\n    reviews:                number[]\n}\n\nexport default async(\n    req: NextApiRequest, \n    res: NextApiResponse<ErrorResponseType | SucessResponseType>\n):Promise<void> => {\n    // POST  - Adiciona usuário\n    if ( req.method == 'POST'){\n        // Pega informações do body da requisição e valida\n        const { name, email, cellphone, isTeacher, courses, available_hours, available_locations, apointments, coins, reviews } = req.body;\n        if(!name || !email || !cellphone || (isTeacher == undefined)) { res.status(400).json({ error:'Missing body parameter'}); return; }\n        // Conecta-se ao banco de dados\n        const { db }   = await connect();\n        const response = await db.collection('users').insertOne({\n            name:                   name,\n            email:                  email,\n            cellphone:              cellphone,\n            isTeacher:              isTeacher,\n            courses:                courses             ? courses :             [],\n            available_hours:        available_hours     ? available_hours :     {},\n            available_locations:    available_locations ? available_locations : [],\n            apointments:            apointments         ? apointments :         [],\n            coins:                  coins               ? coins :               0,\n            reviews:                reviews             ? reviews :             []\n        });\n        res.status(200).json(response.ops[0]);\n    }\n    // GET  - Retorna usuário por email\n    else if ( req.method == 'GET' ){\n        // Pega informações do body da requisição e valida\n        const { email, id } = req.body;\n        if(!email && !id){ res.status(400).json({error: 'Missing ID/E-mail'}); return; }\n        const condition = ( id ? { _id: new ObjectID(id) } : (email ? {email: email} : undefined))\n        // Conecta-se ao banco de dados\n        const { db }   = await connect();\n        const response = condition ? await db.collection('users').findOne(condition) : undefined;\n        res.status(response ? 200 : 400).json(response ? response : {error: 'User not found'});        \n    }\n    // ??? - Retorna erro\n    else{\n        res.status(400).json({ error: 'Wrong requisition method' });\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}