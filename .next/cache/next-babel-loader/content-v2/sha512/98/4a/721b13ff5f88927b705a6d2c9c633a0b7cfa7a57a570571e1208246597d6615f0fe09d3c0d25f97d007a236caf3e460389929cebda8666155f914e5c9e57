{"ast":null,"code":"import connect from '../../utils/database';\nexport default (async (req, res) => {\n  // GET  - Retorna usuário por email\n  if (req.method == 'GET') {\n    // Pega informações do body da requisição e valida\n    const {\n      courses\n    } = req.body;\n\n    if (!courses) {\n      res.status(400).json({\n        error: 'Missing Courses'\n      });\n      return;\n    } // Conecta-se ao banco de dados\n\n\n    const {\n      db\n    } = await connect();\n    const response = await db.collection('users').find({\n      courses: courses\n    }).toArray();\n    res.status(response ? 200 : 400).json(response ? response : {\n      error: 'Course not found'\n    });\n  } // ??? - Retorna erro\n  else {\n      res.status(400).json({\n        error: 'Wrong requisition method'\n      });\n    }\n});","map":{"version":3,"sources":["/home/iago/Documentos/ProjetosNextJS/online-class-scheduler/pages/api/search.tsx"],"names":["connect","req","res","method","courses","body","status","json","error","db","response","collection","find","toArray"],"mappings":"AAEA,OAAOA,OAAP,MAAoB,sBAApB;AAmBA,gBAAe,OACXC,GADW,EAEXC,GAFW,KAGI;AACf;AACA,MAAKD,GAAG,CAACE,MAAJ,IAAc,KAAnB,EAA0B;AACtB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAcH,GAAG,CAACI,IAAxB;;AACA,QAAG,CAACD,OAAJ,EAAa;AAAEF,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAE;AAAR,OAArB;AAAkD;AAAS,KAHpD,CAItB;;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,OAAO,EAA9B;AACA,UAAMU,QAAQ,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,IAAvB,CAA4B;AAAER,MAAAA,OAAO,EAAEA;AAAX,KAA5B,EAAkDS,OAAlD,EAAvB;AACAX,IAAAA,GAAG,CAACI,MAAJ,CAAWI,QAAQ,GAAG,GAAH,GAAS,GAA5B,EAAiCH,IAAjC,CAAsCG,QAAQ,GAAGA,QAAH,GAAc;AAACF,MAAAA,KAAK,EAAE;AAAR,KAA5D;AACH,GARD,CASA;AATA,OAUI;AACAN,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB;AACH;AAEJ,CAnBD","sourcesContent":["import { ObjectID } from 'mongodb';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport connect from '../../utils/database'\n\ninterface ErrorResponseType {\n    error: string\n}\n\ninterface SucessResponseType {\n    _id:                    string,\n    name:                   string,\n    cellphone:              string,\n    isTeacher:              boolean\n    courses:                string[],\n    available_hours:        object,\n    available_locations:    object[],\n    apointments:            object[],\n    coins:                  number,\n    reviews:                number[]\n}\n\nexport default async(\n    req: NextApiRequest, \n    res: NextApiResponse<ErrorResponseType | SucessResponseType | Array<object>>\n):Promise<void> => {\n    // GET  - Retorna usuário por email\n    if ( req.method == 'GET' ){\n        // Pega informações do body da requisição e valida\n        const { courses } = req.body;\n        if(!courses ){ res.status(400).json({error: 'Missing Courses'}); return; }\n        // Conecta-se ao banco de dados\n        const { db }   = await connect();\n        const response = await db.collection('users').find({ courses: courses }).toArray();\n        res.status(response ? 200 : 400).json(response ? response : {error: 'Course not found'});        \n    }\n    // ??? - Retorna erro\n    else{\n        res.status(400).json({ error: 'Wrong requisition method' });\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}