{"ast":null,"code":"import connect from '../../utils/database';\nexport default (async (req, res) => {\n  switch (req.method) {\n    // Requisição POST  - Adiciona usuário\n    case 'POST':\n      // Pega informações do body da requisição e valida\n      const {\n        name,\n        email,\n        cellphone,\n        isTeacher\n      } = req.body;\n\n      if (!name || !email || !cellphone || isTeacher == undefined) {\n        res.status(400).json({\n          error: 'Missing body parameter'\n        });\n        return;\n      } // Conecta-se ao banco de dados\n\n\n      const {\n        db\n      } = await connect();\n      const response = await db.collection('users').insertOne({\n        name: name,\n        email: email,\n        cellphone: cellphone,\n        isTeacher: isTeacher,\n        courses: [],\n        available_hours: {},\n        available_locations: [],\n        apointments: [],\n        coins: 0,\n        reviews: []\n      }); // Retorna na respose o JSON do response\n\n      res.status(200).json(response.ops[0]);\n      break;\n    // Requisição GET   - Devolve usuário\n\n    case 'GET':\n      // Pega informações do body da requisição e valida\n      const {};\n      break;\n    // Outra requisição - Erro\n\n    default:\n      res.status(400).json({\n        error: 'Wrong requisition method'\n      });\n      break;\n  } // Se a requisição é do tipo POST\n\n\n  if (req.method === 'POST') {// Se a requisição não for do tipo POST\n  } else {// Retorna na respose a message\n    }\n});","map":{"version":3,"sources":["/home/iago/Documentos/ProjetosNextJS/online-class-scheduler/pages/api/user.tsx"],"names":["connect","req","res","method","name","email","cellphone","isTeacher","body","undefined","status","json","error","db","response","collection","insertOne","courses","available_hours","available_locations","apointments","coins","reviews","ops"],"mappings":"AAEA,OAAOA,OAAP,MAAoB,sBAApB;AAcA,gBAAe,OACXC,GADW,EAEXC,GAFW,KAGI;AAEf,UAAQD,GAAG,CAACE,MAAZ;AACI;AACA,SAAK,MAAL;AACI;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,KAAR;AAAeC,QAAAA,SAAf;AAA0BC,QAAAA;AAA1B,UAAwCN,GAAG,CAACO,IAAlD;;AACA,UAAG,CAACJ,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACC,SAApB,IAAkCC,SAAS,IAAIE,SAAlD,EAA6D;AACzDP,QAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,KAAK,EAAC;AAAR,SAArB;AACA;AACH,OANL,CAOI;;;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMb,OAAO,EAA9B;AACA,YAAMc,QAAQ,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,SAAvB,CAAiC;AACpDZ,QAAAA,IAAI,EAAoBA,IAD4B;AAEpDC,QAAAA,KAAK,EAAmBA,KAF4B;AAGpDC,QAAAA,SAAS,EAAeA,SAH4B;AAIpDC,QAAAA,SAAS,EAAeA,SAJ4B;AAKpDU,QAAAA,OAAO,EAAiB,EAL4B;AAMpDC,QAAAA,eAAe,EAAS,EAN4B;AAOpDC,QAAAA,mBAAmB,EAAK,EAP4B;AAQpDC,QAAAA,WAAW,EAAa,EAR4B;AASpDC,QAAAA,KAAK,EAAmB,CAT4B;AAUpDC,QAAAA,OAAO,EAAiB;AAV4B,OAAjC,CAAvB,CATJ,CAqBI;;AACApB,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,QAAQ,CAACS,GAAT,CAAa,CAAb,CAArB;AACJ;AACA;;AACA,SAAK,KAAL;AACI;AACA,YAAM,EAAN;AACJ;AACA;;AACA;AACIrB,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB;AACJ;AAlCJ,GAFe,CAsCf;;;AACA,MAAKX,GAAG,CAACE,MAAJ,KAAe,MAApB,EAA4B,CAG5B;AACC,GAJD,MAIK,CACD;AACH;AACJ,CAjDD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport { isUndefined } from 'node:util';\nimport connect from '../../utils/database'\n\ninterface ErrorResponseType {\n    error: string\n}\n\ninterface SucessResponseType {\n    _id:        string,\n    name:       string,\n    cellphone:  string,\n    isTeacher:  boolean\n\n}\n\nexport default async(\n    req: NextApiRequest, \n    res: NextApiResponse<ErrorResponseType | SucessResponseType>\n):Promise<void> => {\n\n    switch( req.method ){\n        // Requisição POST  - Adiciona usuário\n        case 'POST':\n            // Pega informações do body da requisição e valida\n            const { name, email, cellphone, isTeacher } = req.body;\n            if(!name || !email || !cellphone || (isTeacher == undefined)){\n                res.status(400).json({ error:'Missing body parameter'});\n                return;\n            }\n            // Conecta-se ao banco de dados\n            const { db }   = await connect();\n            const response = await db.collection('users').insertOne({\n                name:                   name,\n                email:                  email,\n                cellphone:              cellphone,\n                isTeacher:              isTeacher,\n                courses:                [],\n                available_hours:        {},\n                available_locations:    [],\n                apointments:            [],\n                coins:                  0,\n                reviews:                []\n            });\n            // Retorna na respose o JSON do response\n            res.status(200).json(response.ops[0]);\n        break;\n        // Requisição GET   - Devolve usuário\n        case 'GET':\n            // Pega informações do body da requisição e valida\n            const { }\n        break;\n        // Outra requisição - Erro\n        default:\n            res.status(400).json({ error: 'Wrong requisition method' });\n        break;\n    }\n    // Se a requisição é do tipo POST\n    if ( req.method === 'POST' ){\n\n\n    // Se a requisição não for do tipo POST\n    }else{\n        // Retorna na respose a message\n    }\n}"]},"metadata":{},"sourceType":"module"}