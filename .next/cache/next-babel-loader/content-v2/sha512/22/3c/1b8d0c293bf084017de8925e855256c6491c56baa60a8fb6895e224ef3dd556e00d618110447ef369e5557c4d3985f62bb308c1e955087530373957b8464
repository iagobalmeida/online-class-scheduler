{"ast":null,"code":"import { ObjectId } from 'mongodb';\nimport connect from '../../utils/database';\nexport default (async (req, res) => {\n  // POST  - Adiciona usuário\n  if (req.method == 'POST') {\n    // Pega informações do body da requisição e valida\n    const {\n      date,\n      teacher_id,\n      teacher_name,\n      student_id,\n      student_name,\n      course,\n      location,\n      appointment_link\n    } = req.body;\n\n    if (!date || !teacher_id || !teacher_name || !student_id || !student_name || !course || !location) {\n      res.status(400).json({\n        error: 'Missing body parameter'\n      });\n      return;\n    } // Conecta-se ao banco de dados\n\n\n    const {\n      db\n    } = await connect(); // Verifica se o professor existe\n\n    if (!(await db.collection('users').findOne({\n      _id: new ObjectId(teacher_id)\n    }))) {\n      res.status(400).json({\n        error: `Teacher ${teacher_name} with ID ${teacher_id} does not exist`\n      });\n      return;\n    } // Verifica se o aluno existe\n\n\n    if (!(await db.collection('users').findOne({\n      _id: new ObjectId(student_id)\n    }))) {\n      res.status(400).json({\n        error: `Teacher ${student_name} with ID ${student_id} does not exist`\n      });\n      return;\n    }\n\n    const appointment = {\n      date,\n      teacher_id,\n      teacher_name,\n      student_id,\n      student_name,\n      course,\n      location,\n      appointment_link: appointment_link ? appointment_link : \"No link\"\n    };\n    await db.collection('users').updateOne({\n      _id: new ObjectId(teacher_id)\n    }, {\n      $push: {\n        appointments: appointment\n      }\n    });\n    await db.collection('users').updateOne({\n      _id: new ObjectId(student_id)\n    }, {\n      $push: {\n        appointments: appointment\n      }\n    });\n    res.status(200).json({\n      error: 'Appointment created!'\n    });\n  } // ??? - Retorna erro\n  else {\n      res.status(400).json({\n        error: 'Wrong requisition method'\n      });\n    }\n});","map":{"version":3,"sources":["/home/iago/Documentos/ProjetosNextJS/online-class-scheduler/pages/api/apointment.tsx"],"names":["ObjectId","connect","req","res","method","date","teacher_id","teacher_name","student_id","student_name","course","location","appointment_link","body","status","json","error","db","collection","findOne","_id","appointment","updateOne","$push","appointments"],"mappings":"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","sourcesContent":["import { ObjectId, ObjectID } from 'mongodb';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport connect from '../../utils/database'\n\ninterface ErrorResponseType {\n    error: string\n}\n\ninterface SucessResponseType {\n    _id:                    string,\n    name:                   string,\n    cellphone:              string,\n    isTeacher:              boolean\n    courses:                string[],\n    available_hours:        object,\n    available_locations:    object[],\n    appointments:           object[],\n    coins:                  number,\n    reviews:                number[]\n}\n\nexport default async(\n    req: NextApiRequest, \n    res: NextApiResponse<ErrorResponseType | SucessResponseType>\n):Promise<void> => {\n    // POST  - Adiciona usuário\n    if ( req.method == 'POST'){\n        // Pega informações do body da requisição e valida\n        const { date, teacher_id, teacher_name, student_id, student_name, course, location, appointment_link } = req.body;\n        if(!date || !teacher_id || !teacher_name || !student_id || !student_name || !course || !location) { res.status(400).json({ error:'Missing body parameter'}); return; }\n\n        \n        // Conecta-se ao banco de dados\n        const { db }   = await connect();\n\n        // Verifica se o professor existe\n        if(! await db.collection('users').findOne({_id: new ObjectId(teacher_id)}) ){ res.status(400).json({ error:`Teacher ${teacher_name} with ID ${teacher_id} does not exist`}); return; }\n        // Verifica se o aluno existe\n        if(! await db.collection('users').findOne({_id: new ObjectId(student_id)}) ){ res.status(400).json({ error:`Teacher ${student_name} with ID ${student_id} does not exist`}); return; }\n\n        const appointment = {\n            date,\n            teacher_id,\n            teacher_name,\n            student_id,\n            student_name,\n            course,\n            location,\n            appointment_link : appointment_link ? appointment_link : \"No link\"\n        };\n\n        await db.collection('users').updateOne({ _id: new ObjectId(teacher_id)}, { $push: { appointments: appointment } });\n        await db.collection('users').updateOne({ _id: new ObjectId(student_id)}, { $push: { appointments: appointment } });\n\n        res.status(200).json({ error: 'Appointment created!'});\n    }\n    // ??? - Retorna erro\n    else{\n        res.status(400).json({ error: 'Wrong requisition method' });\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}